#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

use crate::client::ConnectionStatus;
use crate::payments::PaymentDirection;
use crate::payments::PaymentStatus;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_init(port_: i64, path: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| init(api_path)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_join_federation(port_: i64, config_url: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "join_federation",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_config_url = config_url.wire2api();
            move |task_callback| join_federation(api_config_url)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_leave_federation(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "leave_federation",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| leave_federation(),
    )
}

#[no_mangle]
pub extern "C" fn wire_balance(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| balance(),
    )
}

#[no_mangle]
pub extern "C" fn wire_pay(port_: i64, bolt11: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pay",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bolt11 = bolt11.wire2api();
            move |task_callback| pay(api_bolt11)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_decode_invoice(port_: i64, bolt11: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_invoice",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bolt11 = bolt11.wire2api();
            move |task_callback| decode_invoice(api_bolt11)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_invoice(port_: i64, amount: u64, description: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "invoice",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_amount = amount.wire2api();
            let api_description = description.wire2api();
            move |task_callback| invoice(api_amount, api_description)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_fetch_payment(port_: i64, payment_hash: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "fetch_payment",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_payment_hash = payment_hash.wire2api();
            move |task_callback| fetch_payment(api_payment_hash)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_list_payments(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_payments",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| list_payments(),
    )
}

#[no_mangle]
pub extern "C" fn wire_configured_status(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "configured_status",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| configured_status(),
    )
}

#[no_mangle]
pub extern "C" fn wire_connection_status(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_status",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| connection_status(),
    )
}

#[no_mangle]
pub extern "C" fn wire_network(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "network",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| network(),
    )
}

#[no_mangle]
pub extern "C" fn wire_calculate_fee(port_: i64, bolt11: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "calculate_fee",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bolt11 = bolt11.wire2api();
            move |task_callback| calculate_fee(api_bolt11)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_list_federations(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_federations",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(list_federations()),
    )
}

#[no_mangle]
pub extern "C" fn wire_switch_federation(port_: i64, federation: *mut wire_BridgeFederationInfo) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "switch_federation",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_federation = federation.wire2api();
            move |task_callback| switch_federation(api_federation)
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_BridgeFederationInfo {
    name: *mut wire_uint_8_list,
    network: *mut wire_uint_8_list,
    current: bool,
    guardians: *mut wire_list_bridge_guardian_info,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_BridgeGuardianInfo {
    name: *mut wire_uint_8_list,
    address: *mut wire_uint_8_list,
    online: bool,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_bridge_guardian_info {
    ptr: *mut wire_BridgeGuardianInfo,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_bridge_federation_info_0() -> *mut wire_BridgeFederationInfo {
    support::new_leak_box_ptr(wire_BridgeFederationInfo::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_bridge_guardian_info_0(len: i32) -> *mut wire_list_bridge_guardian_info {
    let wrap = wire_list_bridge_guardian_info {
        ptr: support::new_leak_vec_ptr(<wire_BridgeGuardianInfo>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<BridgeFederationInfo> for *mut wire_BridgeFederationInfo {
    fn wire2api(self) -> BridgeFederationInfo {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        Wire2Api::<BridgeFederationInfo>::wire2api(*wrap).into()
    }
}

impl Wire2Api<BridgeFederationInfo> for wire_BridgeFederationInfo {
    fn wire2api(self) -> BridgeFederationInfo {
        BridgeFederationInfo {
            name: self.name.wire2api(),
            network: self.network.wire2api(),
            current: self.current.wire2api(),
            guardians: self.guardians.wire2api(),
        }
    }
}

impl Wire2Api<BridgeGuardianInfo> for wire_BridgeGuardianInfo {
    fn wire2api(self) -> BridgeGuardianInfo {
        BridgeGuardianInfo {
            name: self.name.wire2api(),
            address: self.address.wire2api(),
            online: self.online.wire2api(),
        }
    }
}

impl Wire2Api<Vec<BridgeGuardianInfo>> for *mut wire_list_bridge_guardian_info {
    fn wire2api(self) -> Vec<BridgeGuardianInfo> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_BridgeFederationInfo {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            network: core::ptr::null_mut(),
            current: Default::default(),
            guardians: core::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_BridgeGuardianInfo {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            address: core::ptr::null_mut(),
            online: Default::default(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for BridgeFederationInfo {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.name.into_dart(),
            self.network.into_dart(),
            self.current.into_dart(),
            self.guardians.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BridgeFederationInfo {}

impl support::IntoDart for BridgeGuardianInfo {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.name.into_dart(),
            self.address.into_dart(),
            self.online.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BridgeGuardianInfo {}

impl support::IntoDart for BridgeInvoice {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.payment_hash.into_dart(),
            self.amount.into_dart(),
            self.description.into_dart(),
            self.invoice.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BridgeInvoice {}

impl support::IntoDart for BridgePayment {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.invoice.into_dart(),
            self.status.into_dart(),
            self.created_at.into_dart(),
            self.paid.into_dart(),
            self.direction.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BridgePayment {}

impl support::IntoDart for ConnectionStatus {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::NotConfigured => 0,
            Self::NotConnected => 1,
            Self::Connected => 2,
        }
        .into_dart()
    }
}

impl support::IntoDart for PaymentDirection {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::Outgoing => 0,
            Self::Incoming => 1,
        }
        .into_dart()
    }
}
impl support::IntoDart for PaymentStatus {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::Paid => 0,
            Self::Pending => 1,
            Self::Failed => 2,
            Self::Expired => 3,
        }
        .into_dart()
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
